// <auto-generated />
using BankApplicationRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(BankDBContext))]
    partial class BankDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BankApplicationModels.Bank", b =>
                {
                    b.Property<string>("BankId")
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("BankApplicationModels.Branch", b =>
                {
                    b.Property<string>("BranchId")
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("BranchPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("BranchId");

                    b.HasIndex("BankId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("BankApplicationModels.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(4)
                        .HasColumnType("varchar");

                    b.Property<string>("BankId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<decimal>("ExchangeRate")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CurrencyCode");

                    b.HasIndex("BankId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("BankApplicationModels.HeadManager", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.HasKey("AccountId");

                    b.HasIndex("BranchId");

                    b.ToTable("HeadManagers");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BankApplicationModels.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(23)
                        .HasColumnType("varchar");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Balance")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Credit")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("CustomerAccountId")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<string>("CustomerBankId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<string>("CustomerBranchId")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Debit")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("FromCustomerAccountId")
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<string>("FromCustomerBankId")
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<string>("FromCustomerBranchId")
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<string>("ToCustomerAccountId")
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<string>("ToCustomerBankId")
                        .HasMaxLength(12)
                        .HasColumnType("varchar");

                    b.Property<string>("ToCustomerBranchId")
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<string>("TransactionDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<short>("TransactionType")
                        .HasColumnType("Smallint");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankApplicationModels.TransactionCharges", b =>
                {
                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("varchar");

                    b.Property<short>("ImpsOtherBank")
                        .HasColumnType("Smallint");

                    b.Property<short>("ImpsSameBank")
                        .HasColumnType("Smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("RtgsOtherBank")
                        .HasColumnType("Smallint");

                    b.Property<short>("RtgsSameBank")
                        .HasColumnType("Smallint");

                    b.HasIndex("BranchId");

                    b.ToTable("TransactionCharges");
                });

            modelBuilder.Entity("BankApplicationModels.Customer", b =>
                {
                    b.HasBaseType("BankApplicationModels.HeadManager");

                    b.Property<short>("AccountType")
                        .HasColumnType("Smallint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Balance")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<short>("Gender")
                        .HasColumnType("Smallint");

                    b.Property<string>("PassbookIssueDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BankApplicationModels.Manager", b =>
                {
                    b.HasBaseType("BankApplicationModels.HeadManager");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("BankApplicationModels.ReserveBankManager", b =>
                {
                    b.HasBaseType("BankApplicationModels.HeadManager");

                    b.ToTable("ReserveBankManagers");
                });

            modelBuilder.Entity("BankApplicationModels.Staff", b =>
                {
                    b.HasBaseType("BankApplicationModels.HeadManager");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("BankApplicationModels.Branch", b =>
                {
                    b.HasOne("BankApplicationModels.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("BankApplicationModels.Currency", b =>
                {
                    b.HasOne("BankApplicationModels.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("BankApplicationModels.HeadManager", b =>
                {
                    b.HasOne("BankApplicationModels.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BankApplicationModels.Transaction", b =>
                {
                    b.HasOne("BankApplicationModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BankApplicationModels.TransactionCharges", b =>
                {
                    b.HasOne("BankApplicationModels.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BankApplicationModels.Customer", b =>
                {
                    b.HasOne("BankApplicationModels.HeadManager", null)
                        .WithOne()
                        .HasForeignKey("BankApplicationModels.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankApplicationModels.Manager", b =>
                {
                    b.HasOne("BankApplicationModels.HeadManager", null)
                        .WithOne()
                        .HasForeignKey("BankApplicationModels.Manager", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankApplicationModels.ReserveBankManager", b =>
                {
                    b.HasOne("BankApplicationModels.HeadManager", null)
                        .WithOne()
                        .HasForeignKey("BankApplicationModels.ReserveBankManager", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankApplicationModels.Staff", b =>
                {
                    b.HasOne("BankApplicationModels.HeadManager", null)
                        .WithOne()
                        .HasForeignKey("BankApplicationModels.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
